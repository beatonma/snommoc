/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/social/account/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Account */
        get: operations["social_api_account_get_account"];
        put?: never;
        /** Rename Account */
        post: operations["social_api_account_rename_account"];
        /** Delete Account */
        delete: operations["social_api_account_delete_account"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/social/auth/g/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify Google Token */
        post: operations["social_api_auth_verify_google_token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/social/votes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Vote */
        post: operations["social_api_interactions_create_vote"];
        /** Delete Vote */
        delete: operations["social_api_interactions_delete_vote"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/social/comments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Comment */
        post: operations["social_api_interactions_create_comment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/social/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Social Content */
        get: operations["social_api_interactions_get_social_content"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** UserAccount */
        UserAccount: {
            /** Username */
            username: string;
        };
        NewUsername: components["schemas"]["SanitizedText"];
        /** RenameAccountRequest */
        RenameAccountRequest: {
            /** Token */
            token: string;
            /** Username */
            username: string;
            new_username: components["schemas"]["NewUsername"];
        };
        SanitizedText: string;
        /** DeleteAccountRequest */
        DeleteAccountRequest: {
            /** Token */
            token: string;
        };
        /**
         * UserLoginResponse
         * @description When user signs in successfully, return their basic account info and UserToken
         */
        UserLoginResponse: {
            /** Username */
            username: string;
            /** Token */
            token: string;
        };
        /**
         * GoogleAuthRequest
         * @description Received from a client who wants to sign in using Google oauth2
         */
        GoogleAuthRequest: {
            /** Encoded Oauth Token */
            encoded_oauth_token: string;
        };
        /** CreateVoteRequest */
        CreateVoteRequest: {
            /** Token */
            token: string;
            target: components["schemas"]["InteractionTargetKey"];
            /** Target Id */
            target_id: number;
            vote: components["schemas"]["VoteTypeChoices"];
        };
        /** @enum {string} */
        InteractionTargetKey: "person" | "bill" | "commons_division" | "lords_division" | "constituency";
        /**
         * VoteTypeChoices
         * @enum {string}
         */
        VoteTypeChoices: "aye" | "no";
        /** DeleteVoteRequest */
        DeleteVoteRequest: {
            /** Token */
            token: string;
            target: components["schemas"]["InteractionTargetKey"];
            /** Target Id */
            target_id: number;
        };
        CommentText: string;
        /** CreateCommentRequest */
        CreateCommentRequest: {
            /** Token */
            token: string;
            target: components["schemas"]["InteractionTargetKey"];
            /** Target Id */
            target_id: number;
            text: components["schemas"]["CommentText"];
        };
        /** Comment */
        Comment: {
            /** Username */
            username: string;
            /** Text */
            text: string;
            /**
             * Created On
             * Format: date-time
             */
            created_on: string;
            /**
             * Modified On
             * Format: date-time
             */
            modified_on: string;
        };
        /** SocialContentResponse */
        SocialContentResponse: {
            /** Title */
            title: string;
            /** Comments */
            comments: components["schemas"]["Comment"][];
            /** Votes */
            votes: {
                [key: string]: number;
            };
            user_vote: components["schemas"]["VoteTypeChoices"] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    social_api_account_get_account: {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAccount"];
                };
            };
        };
    };
    social_api_account_rename_account: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RenameAccountRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAccount"];
                };
            };
        };
    };
    social_api_account_delete_account: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteAccountRequest"];
            };
        };
        responses: {
            /** @description Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    social_api_auth_verify_google_token: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoogleAuthRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserLoginResponse"];
                };
            };
        };
    };
    social_api_interactions_create_vote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateVoteRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    social_api_interactions_delete_vote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteVoteRequest"];
            };
        };
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    social_api_interactions_create_comment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCommentRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    social_api_interactions_get_social_content: {
        parameters: {
            query: {
                target: "person" | "bill" | "commons_division" | "lords_division" | "constituency";
                target_id: number;
                token?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SocialContentResponse"];
                };
            };
        };
    };
}
