import logging
import traceback
import uuid as uuid
from functools import wraps

from django.db import models

from common.models import BaseModel
from notifications import permissions
from util.time import get_now

log = logging.getLogger("task")


_NOTIFICATION = "notification"


class TaskNotification(BaseModel):
    class Meta:
        permissions = [
            (
                permissions.VIEW_NOTIFICATION,
                "Can view notifications generated by tasks",
            ),
            (
                permissions.DISMISS_NOTIFICATION,
                "Can dismiss notifications generated by tasks",
            ),
        ]

    title = models.CharField(max_length=255, blank=True, null=True)
    content = models.TextField(null=True, blank=True)
    uuid = models.UUIDField(default=uuid.uuid4)
    read = models.BooleanField(default=False)
    started_at = models.DateTimeField(auto_now_add=True, null=True)
    finished_at = models.DateTimeField(null=True)

    complete = models.BooleanField(default=False)
    failed = models.BooleanField(default=False)

    level = models.PositiveSmallIntegerField(default=logging.INFO)

    @property
    def finished(self):
        return self.complete or self.failed

    def mark_as_read(self):
        self.read = True
        self.save()

    def mark_as_complete(self):
        if self.finished:
            return

        self.complete = True
        self.finished_at = get_now()
        self.save()

    def mark_as_failed(self, err=None):
        if err:
            self.content = (
                self.content or ""
            ) + f"\n{err}\n\n{traceback.format_exc(limit=20)}"
            log.error(
                f"Task `{self.title} {self.pk}` failed: {err.__class__.__name__} {err}"
            )

        self.failed = True
        self.finished_at = get_now()
        self.save()

    def _append(self, content: str, loglevel: int = logging.INFO):
        if self.finished:
            log.warning(
                "Task marked as finished but still being appended to"
                f" (complete={self.complete}, failed={self.failed})"
            )
        log.log(loglevel, content)
        content = f"[{logging.getLevelName(loglevel).lower()}] {content}"
        self.content = "\n".join(x for x in [self.content, content] if x)
        self.save()

    def info(self, content: str):
        self._append(content, loglevel=logging.INFO)

    def warning(self, content: str):
        self._append(content, loglevel=logging.WARNING)

    def error(self, error: Exception, content: str):
        self._append(content, loglevel=logging.ERROR)
        self.mark_as_failed(error)

    @classmethod
    def create(cls, content: str, title: str = "Task notification"):
        return TaskNotification.objects.create(content=content, title=title)

    @staticmethod
    def html_link(url: str, text: str | None = None):
        if text is None:
            text = url
        return f'<a href="{url}">{text}</a>'

    def __str__(self):
        return f"{self.title}"


def task_notification(label: str, level: int = logging.INFO):
    """Wrapper for a task. Creates a TaskNotification at start and updates it when task completes or fails."""

    def notification_decoration(func):
        @wraps(func)
        def create_notification(*args, **kwargs):
            is_root_task = _NOTIFICATION not in kwargs

            if not is_root_task:
                notification = kwargs[_NOTIFICATION]
            else:
                notification = TaskNotification.objects.create(
                    title=f"{label}",
                    level=level,
                )
                kwargs[_NOTIFICATION] = notification

            try:
                func(*args, **kwargs)
                if is_root_task:
                    notification.mark_as_complete()

            except (Exception, KeyboardInterrupt) as e:
                notification.mark_as_failed(err=e)
                raise e

            finally:
                if is_root_task and not notification.finished:
                    notification.mark_as_failed()

        return create_notification

    return notification_decoration
