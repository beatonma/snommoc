# Generated by Django 5.2.3 on 2025-07-30 16:57

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import phonenumber_field.modelfields
from django.db import migrations, models

import repository.models.mixins
import util.cleanup
import util.time


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="AddressType",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BillAgent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255)),
                ("address", models.TextField(blank=True, null=True)),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=128, null=True, region=None
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                ("website", models.URLField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BillPublicationType",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BillStageType",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BillType",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BillTypeCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Committee",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=512)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Constituency",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("start", models.DateField(blank=True, null=True)),
                ("end", models.DateField(blank=True, null=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "ascii_name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Simplified ASCII name",
                        max_length=128,
                        null=True,
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                (
                    "ordinance_survey_name",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "gss_code",
                    models.CharField(
                        blank=True,
                        help_text="Government Statistical Service ID",
                        max_length=12,
                        null=True,
                        unique=True,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Constituencies",
            },
            bases=(repository.models.mixins.SocialMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=64, unique=True)),
            ],
            options={
                "verbose_name_plural": "Countries",
            },
        ),
        migrations.CreateModel(
            name="ParliamentaryEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("date", models.DateField()),
            ],
            options={
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="DivisionVoteType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=64, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Election",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=128, unique=True)),
                ("date", models.DateField(blank=True, default=None, null=True)),
            ],
            options={
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="ElectionType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=32)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ExperienceCategory",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=128, unique=True)),
            ],
            options={
                "verbose_name_plural": "Experience categories",
            },
        ),
        migrations.CreateModel(
            name="House",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=16, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LordsType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=64, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Organisation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=512, unique=True)),
                ("slug", models.SlugField(unique=True)),
                ("url", models.URLField(blank=True, null=True)),
                (
                    "companies_house_id",
                    models.CharField(blank=True, max_length=64, null=True, unique=True),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ParliamentarySession",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("start", models.DateField(blank=True, null=True)),
                ("end", models.DateField(blank=True, null=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=24, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Party",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "wikipedia",
                    models.CharField(
                        blank=True,
                        help_text="Path section of a wikipedia url (e.g. 'John_Baron_(politician)')",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "ascii_name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Simplified ASCII name",
                        max_length=128,
                        null=True,
                    ),
                ),
                ("name", models.CharField(max_length=64, unique=True)),
                (
                    "short_name",
                    models.CharField(
                        blank=True, default=None, max_length=16, null=True, unique=True
                    ),
                ),
                (
                    "long_name",
                    models.CharField(
                        blank=True,
                        default=None,
                        help_text="Official name",
                        max_length=128,
                        null=True,
                        unique=True,
                    ),
                ),
                ("homepage", models.URLField(blank=True, null=True)),
                ("year_founded", models.PositiveSmallIntegerField(default=0)),
                (
                    "logo",
                    models.FileField(blank=True, null=True, upload_to="party_logo"),
                ),
                (
                    "logo_mask",
                    models.FileField(
                        blank=True, null=True, upload_to="party_logo_mask"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Parties",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SubjectOfInterestCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("title", models.CharField(max_length=128, unique=True)),
            ],
            options={
                "verbose_name_plural": "Subject of interest categories",
            },
        ),
        migrations.CreateModel(
            name="Bill",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("long_title", models.TextField(blank=True, null=True)),
                (
                    "summary",
                    models.TextField(
                        blank=True, help_text="HTML-formatted description", null=True
                    ),
                ),
                ("last_update", models.DateTimeField()),
                ("withdrawn_at", models.DateTimeField(blank=True, null=True)),
                ("is_defeated", models.BooleanField()),
                ("is_act", models.BooleanField()),
                (
                    "petitioning_period",
                    models.CharField(blank=True, max_length=512, null=True),
                ),
                ("petitioning_information", models.TextField(blank=True, null=True)),
                (
                    "agent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.billagent",
                    ),
                ),
                (
                    "bill_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="repository.billtype",
                    ),
                ),
                (
                    "current_house",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bills_current",
                        to="repository.house",
                    ),
                ),
                (
                    "originating_house",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bills_originated",
                        to="repository.house",
                    ),
                ),
                (
                    "promoters",
                    models.ManyToManyField(
                        related_name="promoted_bills", to="repository.organisation"
                    ),
                ),
                (
                    "session_introduced",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bills_introduced",
                        to="repository.parliamentarysession",
                    ),
                ),
                (
                    "sessions",
                    models.ManyToManyField(
                        related_name="bills", to="repository.parliamentarysession"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(repository.models.mixins.SocialMixin, models.Model),
        ),
        migrations.CreateModel(
            name="BillPublication",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.TextField()),
                ("display_date", models.DateTimeField()),
                (
                    "bill",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="publications",
                        to="repository.bill",
                    ),
                ),
                (
                    "publication_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="repository.billpublicationtype",
                    ),
                ),
                (
                    "house",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="repository.house",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BillPublicationLink",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.TextField()),
                ("url", models.URLField(max_length=500)),
                ("content_type", models.CharField(max_length=128)),
                (
                    "publication",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="links",
                        to="repository.billpublication",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BillStage",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "abbreviation",
                    models.CharField(blank=True, max_length=16, null=True),
                ),
                ("sort_order", models.PositiveSmallIntegerField()),
                (
                    "bill",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stages",
                        to="repository.bill",
                    ),
                ),
                (
                    "stage_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="repository.billstagetype",
                    ),
                ),
                (
                    "house",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="repository.house",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bill_stages",
                        to="repository.parliamentarysession",
                    ),
                ),
            ],
            options={
                "ordering": ["-sittings__date"],
            },
        ),
        migrations.CreateModel(
            name="BillStageSitting",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("date", models.DateTimeField()),
                (
                    "stage",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sittings",
                        to="repository.billstage",
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
            },
        ),
        migrations.AddField(
            model_name="billtype",
            name="category",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="repository.billtypecategory",
            ),
        ),
        migrations.CreateModel(
            name="CommitteeMember",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("start", models.DateField(blank=True, null=True)),
                ("end", models.DateField(blank=True, null=True)),
                (
                    "committee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.committee",
                    ),
                ),
            ],
            options={
                "ordering": ["-end", "-start"],
            },
        ),
        migrations.CreateModel(
            name="CommitteeChair",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("start", models.DateField(blank=True, null=True)),
                ("end", models.DateField(blank=True, null=True)),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.committeemember",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(util.cleanup.Deprecated, models.Model),
        ),
        migrations.CreateModel(
            name="ConstituencyBoundary",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "geometry",
                    django.contrib.gis.db.models.fields.GeometryField(
                        srid=4326, tolerance=1
                    ),
                ),
                ("north", models.FloatField()),
                ("south", models.FloatField()),
                ("east", models.FloatField()),
                ("west", models.FloatField()),
                ("centroid", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ("simple_json", models.TextField()),
                (
                    "constituency",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="boundary",
                        to="repository.constituency",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Constituency Boundaries",
            },
        ),
        migrations.CreateModel(
            name="ConstituencyResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("start", models.DateField(blank=True, null=True)),
                ("end", models.DateField(blank=True, null=True)),
                (
                    "winner_name",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                (
                    "constituency",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        related_query_name="result",
                        to="repository.constituency",
                    ),
                ),
                (
                    "election",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        related_query_name="result",
                        to="repository.election",
                    ),
                ),
            ],
            options={
                "ordering": ["constituency", "election"],
            },
        ),
        migrations.CreateModel(
            name="ConstituencyResultDetail",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("result", models.CharField(max_length=32)),
                ("majority", models.PositiveIntegerField(default=0)),
                ("turnout", models.PositiveIntegerField(default=0)),
                ("electorate", models.PositiveIntegerField(default=0)),
                (
                    "constituency_result",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="detail",
                        to="repository.constituencyresult",
                    ),
                ),
            ],
            options={
                "ordering": ["constituency_result"],
            },
        ),
        migrations.CreateModel(
            name="Division",
            fields=[
                (
                    "parliamentaryevent_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="repository.parliamentaryevent",
                    ),
                ),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website"
                    ),
                ),
                ("title", models.TextField(blank=True, null=True)),
                ("is_passed", models.BooleanField()),
                ("number", models.PositiveSmallIntegerField()),
                (
                    "ayes",
                    models.PositiveSmallIntegerField(
                        help_text="How many members voted for the motion"
                    ),
                ),
                (
                    "noes",
                    models.PositiveSmallIntegerField(
                        help_text="How many members voted against the motion"
                    ),
                ),
                (
                    "house",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.house",
                    ),
                ),
            ],
            bases=(
                "repository.parliamentaryevent",
                repository.models.mixins.SocialMixin,
                models.Model,
            ),
        ),
        migrations.AddField(
            model_name="election",
            name="election_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="repository.electiontype",
            ),
        ),
        migrations.AddField(
            model_name="billstagetype",
            name="house",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="repository.house"
            ),
        ),
        migrations.CreateModel(
            name="ElectionNationalResult",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "election",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.election",
                    ),
                ),
                (
                    "winning_party",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.party",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PartyAlsoKnownAs",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("alias", models.CharField(max_length=64, unique=True)),
                (
                    "canonical",
                    models.ForeignKey(
                        blank=True,
                        help_text="Preferred party instance",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="aliases",
                        to="repository.party",
                    ),
                ),
            ],
            options={
                "verbose_name": "PartyAlsoKnownAs",
                "verbose_name_plural": "Parties also known as",
                "ordering": ["canonical__name", "alias"],
            },
        ),
        migrations.CreateModel(
            name="PartyLordsDemographics",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("life_count", models.PositiveSmallIntegerField()),
                ("hereditary_count", models.PositiveSmallIntegerField()),
                ("bishop_count", models.PositiveSmallIntegerField()),
                ("total_count", models.PositiveSmallIntegerField()),
                (
                    "party",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lords_demographics",
                        to="repository.party",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PartyTerritory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "geometry",
                    django.contrib.gis.db.models.fields.GeometryField(
                        srid=4326, tolerance=1
                    ),
                ),
                ("north", models.FloatField()),
                ("south", models.FloatField()),
                ("east", models.FloatField()),
                ("west", models.FloatField()),
                ("centroid", django.contrib.gis.db.models.fields.PointField(srid=4326)),
                (
                    "party",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="territory",
                        to="repository.party",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PartyTheme",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "primary",
                    models.CharField(help_text="Hex color code", max_length=10),
                ),
                (
                    "on_primary",
                    models.CharField(
                        choices=[("#ffffff", "light"), ("#000000", "dark")],
                        help_text="Color for text that overlays primary",
                        max_length=10,
                    ),
                ),
                (
                    "accent",
                    models.CharField(
                        default="#ffffff", help_text="Hex color code", max_length=10
                    ),
                ),
                (
                    "on_accent",
                    models.CharField(
                        choices=[("#ffffff", "light"), ("#000000", "dark")],
                        default="#000000",
                        help_text="Color for text that overlays accent",
                        max_length=10,
                    ),
                ),
                (
                    "party",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="theme",
                        to="repository.party",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "theyworkforyou",
                    models.PositiveIntegerField(
                        help_text="ID used on theyworkforyou.com",
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "wikipedia",
                    models.CharField(
                        blank=True,
                        help_text="Path section of a wikipedia url (e.g. 'John_Baron_(politician)')",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "ascii_name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Simplified ASCII name",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Canonical name for this person.", max_length=128
                    ),
                ),
                (
                    "sort_name",
                    models.CharField(
                        blank=True, db_index=True, max_length=128, null=True
                    ),
                ),
                (
                    "full_title",
                    models.CharField(
                        blank=True,
                        help_text="Official name with honorifics.",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True, default=None, max_length=16, null=True
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(blank=True, default=None, null=True),
                ),
                (
                    "date_of_death",
                    models.DateField(blank=True, default=None, null=True),
                ),
                (
                    "country_of_birth",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.country",
                    ),
                ),
                (
                    "house",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.house",
                    ),
                ),
                (
                    "lords_type",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="The source of this person's lordship, if applicable (e.g. hereditary, bishop, peerage, etc)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="lords",
                        related_query_name="lord",
                        to="repository.lordstype",
                    ),
                ),
                (
                    "party",
                    models.ForeignKey(
                        blank=True,
                        help_text="Current party membership. Historic memberships can be retrieved via PartyAffiliation model.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="repository.party",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "People",
                "ordering": ["name"],
            },
            bases=(repository.models.mixins.SocialMixin, models.Model),
        ),
        migrations.CreateModel(
            name="MemberPortrait",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "year_taken",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                ("fullsize_url", models.URLField(blank=True, null=True)),
                ("square_url", models.URLField(blank=True, null=True)),
                ("wide_url", models.URLField(blank=True, null=True)),
                ("tall_url", models.URLField(blank=True, null=True)),
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.person",
                    ),
                ),
            ],
            options={
                "verbose_name": "Member Portrait",
                "verbose_name_plural": "Member Portraits",
            },
        ),
        migrations.CreateModel(
            name="MaidenSpeech",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("date", models.DateField()),
                ("subject", models.CharField(blank=True, max_length=512, null=True)),
                (
                    "hansard",
                    models.CharField(
                        blank=True, help_text="Hansard ID", max_length=32, null=True
                    ),
                ),
                (
                    "house",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.house",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.person",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Maiden Speeches",
            },
            bases=(util.cleanup.Deprecated, models.Model),
        ),
        migrations.CreateModel(
            name="LifeEvent",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateField(blank=True, null=True)),
                ("end", models.DateField(blank=True, null=True)),
                ("title", models.CharField(max_length=512)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.person",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Experience",
            fields=[
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("start", models.DateField(blank=True, null=True)),
                ("end", models.DateField(blank=True, null=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=512)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.experiencecategory",
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.organisation",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="experiences",
                        to="repository.person",
                    ),
                ),
            ],
            options={
                "ordering": ["-end", "-start"],
            },
        ),
        migrations.CreateModel(
            name="ContestedElection",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("date", models.DateField()),
                (
                    "constituency",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.constituency",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contested_elections",
                        to="repository.person",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="constituencyresult",
            name="winner",
            field=models.ForeignKey(
                blank=True,
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="constituency_results",
                related_query_name="constituency_result",
                to="repository.person",
            ),
        ),
        migrations.CreateModel(
            name="ConstituencyRepresentative",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("start", models.DateField(blank=True, null=True)),
                ("end", models.DateField(blank=True, null=True)),
                (
                    "constituency",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="representatives",
                        related_query_name="representative",
                        to="repository.constituency",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="constituencies",
                        to="repository.person",
                    ),
                ),
            ],
            options={
                "ordering": ["-end", "-start"],
            },
        ),
        migrations.CreateModel(
            name="ConstituencyCandidate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=128)),
                ("votes", models.PositiveIntegerField(default=0)),
                ("order", models.PositiveSmallIntegerField(default=100)),
                (
                    "result_change",
                    models.CharField(blank=True, max_length=16, null=True),
                ),
                (
                    "election_result",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="candidates",
                        related_query_name="candidate",
                        to="repository.constituencyresultdetail",
                    ),
                ),
                (
                    "party",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.party",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.person",
                    ),
                ),
            ],
            options={
                "ordering": ["name", "election_result"],
            },
        ),
        migrations.AddField(
            model_name="constituency",
            name="mp",
            field=models.OneToOneField(
                help_text="Current representative",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="constituency",
                to="repository.person",
            ),
        ),
        migrations.AddField(
            model_name="committeemember",
            name="person",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="committees",
                to="repository.person",
            ),
        ),
        migrations.CreateModel(
            name="BillSponsor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("sort_order", models.PositiveSmallIntegerField()),
                (
                    "bill",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sponsors",
                        to="repository.bill",
                    ),
                ),
                (
                    "organisation",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sponsored_bills",
                        to="repository.organisation",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sponsored_bills",
                        to="repository.person",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PersonAlsoKnownAs",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("alias", models.CharField(max_length=128, unique=True)),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="aliases",
                        to="repository.person",
                    ),
                ),
            ],
            options={
                "verbose_name": "PersonAlsoKnownAs",
                "verbose_name_plural": "People also known as",
            },
        ),
        migrations.CreateModel(
            name="PersonStatus",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("start", models.DateField(blank=True, null=True)),
                ("end", models.DateField(blank=True, null=True)),
                (
                    "is_current",
                    models.BooleanField(
                        db_index=True,
                        help_text="Whether this person currently has a seat in one of the houses.",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        help_text="Whether this person is currently using their seat. May be false if they are on leave or suspended in some way.",
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="status",
                        to="repository.person",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PhysicalAddress",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("is_preferred", models.BooleanField(default=False)),
                ("address", models.TextField(blank=True, null=True)),
                ("postcode", models.CharField(blank=True, max_length=10, null=True)),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=128, null=True, region=None
                    ),
                ),
                (
                    "fax",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=128, null=True, region=None
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=254, null=True)),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="physical_addresses",
                        to="repository.person",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.addresstype",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Physical addresses",
            },
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("government", "Government"),
                            ("opposition", "Opposition"),
                            ("other", "Other"),
                        ],
                        max_length=24,
                    ),
                ),
                ("name", models.CharField(max_length=512)),
                (
                    "hansard_name",
                    models.CharField(blank=True, max_length=512, null=True),
                ),
                (
                    "additional_info",
                    models.CharField(blank=True, max_length=512, null=True),
                ),
                ("additional_info_link", models.URLField(blank=True, null=True)),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("parliamentdotuk", "type"),
                        name="unique_parliamentdotuk_per_posttype",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="PostHolder",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("start", models.DateField(blank=True, null=True)),
                ("end", models.DateField(blank=True, null=True)),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="repository.person",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="holders",
                        to="repository.post",
                    ),
                ),
            ],
            options={
                "ordering": ["-end", "-start"],
            },
        ),
        migrations.CreateModel(
            name="RegisteredInterestCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("codename_major", models.PositiveSmallIntegerField()),
                (
                    "codename_minor",
                    models.CharField(blank=True, max_length=5, null=True),
                ),
                ("name", models.CharField(max_length=512)),
                ("sort_order", models.PositiveSmallIntegerField(default=0)),
                (
                    "house",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.house",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Registered interest categories",
                "ordering": ("house", "sort_order"),
            },
        ),
        migrations.CreateModel(
            name="RegisteredInterest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                (
                    "parliamentdotuk",
                    models.PositiveIntegerField(
                        help_text="ID used on parliament.uk website - unique per person"
                    ),
                ),
                ("description", models.TextField()),
                ("description_data", models.JSONField(default=dict)),
                ("created", models.DateField(blank=True, null=True)),
                ("amended", models.DateField(blank=True, null=True)),
                ("deleted", models.DateField(blank=True, null=True)),
                ("is_correction", models.BooleanField(default=False)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="repository.registeredinterest",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="registered_interests",
                        to="repository.person",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.registeredinterestcategory",
                    ),
                ),
            ],
            options={
                "ordering": ("-amended", "-created"),
            },
        ),
        migrations.CreateModel(
            name="SubjectOfInterest",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("description", models.TextField()),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subjects_of_interest",
                        to="repository.person",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.subjectofinterestcategory",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Subjects of interest",
            },
        ),
        migrations.CreateModel(
            name="Town",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=64)),
                (
                    "country",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="repository.country",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="person",
            name="town_of_birth",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="repository.town",
            ),
        ),
        migrations.CreateModel(
            name="WebAddress",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("is_preferred", models.BooleanField(default=False)),
                ("url", models.URLField()),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="web_addresses",
                        to="repository.person",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.addresstype",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Web addresses",
            },
        ),
        migrations.CreateModel(
            name="CommonsDivision",
            fields=[
                (
                    "division_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="repository.division",
                    ),
                ),
                (
                    "did_not_vote",
                    models.PositiveSmallIntegerField(
                        help_text="How many members did not vote at all"
                    ),
                ),
                (
                    "is_deferred_vote",
                    models.BooleanField(
                        default=False,
                        help_text="A deferred vote is one that is not held immediately at the end of the debate, but at a later 'convenient' time",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("repository.division", models.Model),
        ),
        migrations.CreateModel(
            name="LordsDivision",
            fields=[
                (
                    "division_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="repository.division",
                    ),
                ),
                ("amendment_motion_notes", models.TextField(blank=True, null=True)),
                ("is_whipped", models.BooleanField()),
                ("is_government_content", models.BooleanField()),
                ("division_had_tellers", models.BooleanField()),
                ("teller_content_count", models.PositiveSmallIntegerField()),
                ("teller_not_content_count", models.PositiveSmallIntegerField()),
                ("is_government_win", models.BooleanField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
            bases=("repository.division", models.Model),
        ),
        migrations.CreateModel(
            name="DivisionVote",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("is_teller", models.BooleanField(default=False)),
                (
                    "vote_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="repository.divisionvotetype",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="repository.person",
                    ),
                ),
                (
                    "division",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="repository.division",
                    ),
                ),
            ],
            options={
                "ordering": ["-division__date"],
            },
        ),
        migrations.CreateModel(
            name="PartyGenderDemographics",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("male_member_count", models.PositiveSmallIntegerField()),
                ("female_member_count", models.PositiveSmallIntegerField()),
                ("non_binary_member_count", models.PositiveSmallIntegerField()),
                ("total_member_count", models.PositiveSmallIntegerField()),
                (
                    "house",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="gender_demographics",
                        to="repository.house",
                    ),
                ),
                (
                    "party",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="gender_demographics",
                        to="repository.party",
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("party", "house"),
                        name="unique_gender_demographics_per_party_per_house",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="PartyAffiliation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("start", models.DateField(blank=True, null=True)),
                ("end", models.DateField(blank=True, null=True)),
                (
                    "party",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.party",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="party_affiliations",
                        to="repository.person",
                    ),
                ),
            ],
            options={
                "ordering": ["-end", "-start"],
                "constraints": [
                    models.UniqueConstraint(
                        fields=("start", "person", "party"),
                        name="unique_party_per_person_per_startdate",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="HouseMembership",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=util.time.get_now)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("start", models.DateField(blank=True, null=True)),
                ("end", models.DateField(blank=True, null=True)),
                (
                    "house",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="repository.house",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="house_memberships",
                        to="repository.person",
                    ),
                ),
            ],
            options={
                "unique_together": {("start", "house", "person")},
            },
        ),
        migrations.AddConstraint(
            model_name="constituencyresult",
            constraint=models.UniqueConstraint(
                fields=("election", "constituency"), name="unique_constituency_result"
            ),
        ),
        migrations.AddConstraint(
            model_name="constituencyrepresentative",
            constraint=models.UniqueConstraint(
                fields=("person", "constituency", "start"),
                name="unique_person_per_constituency_per_startdate",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="constituencycandidate",
            unique_together={("election_result", "name")},
        ),
        migrations.AddConstraint(
            model_name="committeemember",
            constraint=models.UniqueConstraint(
                fields=("person", "committee", "start"),
                name="unique_committee_per_person_per_start_date",
            ),
        ),
        migrations.AddConstraint(
            model_name="billsponsor",
            constraint=models.UniqueConstraint(
                fields=("bill", "member", "organisation"),
                name="unique_billsponsor_per_bill",
            ),
        ),
        migrations.AddConstraint(
            model_name="physicaladdress",
            constraint=models.UniqueConstraint(
                fields=("type", "person"), name="unique_address_type_per_person"
            ),
        ),
        migrations.AddConstraint(
            model_name="registeredinterestcategory",
            constraint=models.UniqueConstraint(
                fields=("codename_major", "codename_minor", "house"),
                name="unique_codename_per_house",
            ),
        ),
        migrations.AddConstraint(
            model_name="registeredinterest",
            constraint=models.UniqueConstraint(
                fields=("parliamentdotuk", "person"), name="unique_id_per_person"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="town",
            unique_together={("name", "country")},
        ),
        migrations.AddConstraint(
            model_name="webaddress",
            constraint=models.UniqueConstraint(
                fields=("type", "person"), name="unique_webaddress_type_per_person"
            ),
        ),
        migrations.AddField(
            model_name="commonsdivision",
            name="session",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="repository.parliamentarysession",
            ),
        ),
        migrations.AddField(
            model_name="lordsdivision",
            name="sponsoring_member",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="sponsored_lords_divisions",
                to="repository.person",
            ),
        ),
        migrations.AddConstraint(
            model_name="divisionvote",
            constraint=models.UniqueConstraint(
                fields=("person", "division"), name="One vote per person per division"
            ),
        ),
        migrations.AddConstraint(
            model_name="division",
            constraint=models.UniqueConstraint(
                fields=("parliamentdotuk", "house"), name="Unique id per house"
            ),
        ),
    ]
